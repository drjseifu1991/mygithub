{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Octicon, { Repo, Star, RepoForked, TriangleDown } from '@primer/octicons-react';\nimport FlipMove from 'react-flip-move';\nimport { langColors } from '../utils';\nimport ReposStyles from './styles/ReposStyles';\nimport DropdownStyles from './styles/DropdownStyles';\nimport { Section } from '../style';\nconst Repos = ({\n  repoData\n}) => {\n  const {\n    0: topRepos,\n    1: setTopRepos\n  } = useState([]);\n  const {\n    0: sortType,\n    1: setSortType\n  } = useState('stars');\n  const {\n    0: dropdownOpen,\n    1: setDropdownOpen\n  } = useState(false);\n  const getTopRepos = type => {\n    const LIMIT = 8;\n    const map = {\n      stars: 'stargazers_count',\n      forks: 'forks_count',\n      size: 'size'\n    };\n    const sortProperty = map[type];\n    const sorted = repoData.filter(repo => !repo.fork).sort((a, b) => b[sortProperty] - a[sortProperty]).slice(0, LIMIT);\n    setTopRepos(sorted);\n  };\n  useEffect(() => {\n    if (repoData.length) {\n      getTopRepos();\n    }\n  }, []);\n  useEffect(() => getTopRepos(sortType), [sortType]);\n  const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\n  const changeRepoSort = sortType => {\n    setSortType(sortType);\n    toggleDropdown();\n  };\n  const sortTypes = ['stars', 'forks', 'size'];\n  return __jsx(Section, null, __jsx(ReposStyles, null, __jsx(\"header\", null, __jsx(\"h2\", null, \"Top Repos\"), __jsx(\"div\", {\n    className: \"dropdown-wrapper\"\n  }, __jsx(\"span\", {\n    className: \"label\"\n  }, \"by\"), __jsx(DropdownStyles, {\n    active: dropdownOpen\n  }, __jsx(\"button\", {\n    className: \"dropdown__button\",\n    onClick: () => toggleDropdown()\n  }, __jsx(\"label\", null, sortType), __jsx(Octicon, {\n    icon: TriangleDown\n  })), __jsx(\"ul\", {\n    className: \"dropdown__list\"\n  }, sortTypes.map((type, i) => __jsx(\"li\", {\n    className: \"dropdown__list-item\",\n    key: i\n  }, __jsx(\"button\", {\n    onClick: () => changeRepoSort(type)\n  }, type))))))), __jsx(\"div\", {\n    className: \"repo-list\"\n  }, topRepos.length > 0 ? __jsx(FlipMove, {\n    typeName: \"ul\"\n  }, topRepos.map(repo => __jsx(\"li\", {\n    key: repo.id\n  }, __jsx(\"a\", {\n    href: repo.html_url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    className: \"repo\"\n  }, __jsx(\"div\", {\n    className: \"repo__top\"\n  }, __jsx(\"div\", {\n    className: \"repo__name\"\n  }, __jsx(Octicon, {\n    icon: Repo\n  }), __jsx(\"h3\", null, repo.name)), __jsx(\"p\", null, repo.description)), __jsx(\"div\", {\n    className: \"repo__stats\"\n  }, __jsx(\"div\", {\n    className: \"repo__stats--left\"\n  }, __jsx(\"span\", null, __jsx(\"div\", {\n    className: \"language\",\n    style: {\n      backgroundColor: langColors[repo.language]\n    }\n  }), repo.language), __jsx(\"span\", null, __jsx(Octicon, {\n    icon: Star\n  }), repo.stargazers_count.toLocaleString()), __jsx(\"span\", null, __jsx(Octicon, {\n    icon: RepoForked\n  }), repo.forks.toLocaleString())), __jsx(\"div\", {\n    className: \"repo__stats--right\"\n  }, __jsx(\"span\", null, repo.size.toLocaleString(), \" KB\"))))))) : __jsx(\"p\", null, \"No available repositories!\"))));\n};\nexport default Repos;","map":null,"metadata":{},"sourceType":"module"}