{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { buildChart, langColors, backgroundColor, borderColor } from '../utils';\nimport ChartsStyles from './styles/ChartsStyles';\nimport { Section } from '../style';\nvar Charts = function Charts(_ref) {\n  var langData = _ref.langData,\n    repoData = _ref.repoData;\n  // Create chart with langData\n  var _useState = useState(null),\n    langChartData = _useState[0],\n    setLangChartData = _useState[1];\n  var initLangChart = function initLangChart() {\n    var ctx = document.getElementById('langChart');\n    var labels = langData.map(function (lang) {\n      return lang.label;\n    });\n    var data = langData.map(function (lang) {\n      return lang.value;\n    });\n    setLangChartData(data);\n    if (data.length > 0) {\n      var _backgroundColor = langData.map(function (_ref2) {\n        var color = _ref2.color;\n        return \"#\".concat(color.length > 4 ? color.slice(1) : color.slice(1).repeat(2), \"B3\");\n      });\n      var _borderColor = langData.map(function (lang) {\n        return \"\".concat(lang.color);\n      });\n      var chartType = 'pie';\n      var axes = false;\n      var legend = true;\n      var config = {\n        ctx: ctx,\n        chartType: chartType,\n        labels: labels,\n        data: data,\n        backgroundColor: _backgroundColor,\n        borderColor: _borderColor,\n        axes: axes,\n        legend: legend\n      };\n      buildChart(config);\n    }\n  };\n\n  // Create Most Starred chart\n  var _useState2 = useState(null),\n    starChartData = _useState2[0],\n    setStarChartData = _useState2[1];\n  var initStarChart = function initStarChart() {\n    var ctx = document.getElementById('starChart');\n    var LIMIT = 5;\n    var sortProperty = 'stargazers_count';\n    var mostStarredRepos = repoData.filter(function (repo) {\n      return !repo.fork;\n    }).sort(function (a, b) {\n      return b[sortProperty] - a[sortProperty];\n    }).slice(0, LIMIT);\n    var labels = mostStarredRepos.map(function (repo) {\n      return repo.name;\n    });\n    var data = mostStarredRepos.map(function (repo) {\n      return repo[sortProperty];\n    });\n    setStarChartData(data);\n    if (data.length > 0) {\n      var chartType = 'bar';\n      var axes = true;\n      var legend = false;\n      var config = {\n        ctx: ctx,\n        chartType: chartType,\n        labels: labels,\n        data: data,\n        backgroundColor: backgroundColor,\n        borderColor: borderColor,\n        axes: axes,\n        legend: legend\n      };\n      buildChart(config);\n    }\n  };\n\n  // Create Stars per language chart\n  var _useState3 = useState(null),\n    thirdChartData = _useState3[0],\n    setThirdChartData = _useState3[1];\n  var initThirdChart = function initThirdChart() {\n    var ctx = document.getElementById('thirdChart');\n    var filteredRepos = repoData.filter(function (repo) {\n      return !repo.fork && repo.stargazers_count > 0;\n    });\n    var uniqueLangs = new Set(filteredRepos.map(function (repo) {\n      return repo.language;\n    }));\n    var labels = Array.from(uniqueLangs.values()).filter(function (l) {\n      return l;\n    });\n    var data = labels.map(function (lang) {\n      var repos = filteredRepos.filter(function (repo) {\n        return repo.language === lang;\n      });\n      var starsArr = repos.map(function (r) {\n        return r.stargazers_count;\n      });\n      var starSum = starsArr.reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      return starSum;\n    });\n    setThirdChartData(data);\n    if (data.length > 0) {\n      var chartType = 'doughnut';\n      var axes = false;\n      var legend = true;\n      var _borderColor2 = labels.map(function (label) {\n        return langColors[label];\n      });\n      var _backgroundColor2 = _borderColor2.map(function (color) {\n        return \"\".concat(color, \"B3\");\n      });\n      var config = {\n        ctx: ctx,\n        chartType: chartType,\n        labels: labels,\n        data: data,\n        backgroundColor: _backgroundColor2,\n        borderColor: _borderColor2,\n        axes: axes,\n        legend: legend\n      };\n      buildChart(config);\n    }\n  };\n  useEffect(function () {\n    if (langData.length && repoData.length) {\n      initLangChart();\n      initStarChart();\n      initThirdChart();\n    }\n  }, []);\n  var chartSize = 300;\n  var langChartError = !(langChartData && langChartData.length > 0);\n  var starChartError = !(starChartData && starChartData.length > 0);\n  var thirdChartError = !(thirdChartData && thirdChartData.length > 0);\n  return __jsx(Section, null, __jsx(ChartsStyles, null, __jsx(\"div\", {\n    className: \"chart\"\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Top Languages\")), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, langChartError && __jsx(\"p\", null, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"langChart\",\n    width: chartSize,\n    height: chartSize\n  }))), __jsx(\"div\", {\n    className: \"chart\"\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Most Starred\")), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, starChartError && __jsx(\"p\", null, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"starChart\",\n    width: chartSize,\n    height: chartSize\n  }))), __jsx(\"div\", {\n    className: \"chart\"\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Stars per Language\")), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, thirdChartError && __jsx(\"p\", null, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"thirdChart\",\n    width: chartSize,\n    height: chartSize\n  })))));\n};\nexport default Charts;","map":null,"metadata":{},"sourceType":"module"}