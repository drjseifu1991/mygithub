{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { buildChart, langColors, backgroundColor, borderColor } from '../utils';\nimport ChartsStyles from './styles/ChartsStyles';\nimport { Section } from '../style';\nconst Charts = ({\n  langData,\n  repoData\n}) => {\n  // Create chart with langData\n  const {\n    0: langChartData,\n    1: setLangChartData\n  } = useState(null);\n  const initLangChart = () => {\n    const ctx = document.getElementById('langChart');\n    const labels = langData.map(lang => lang.label);\n    const data = langData.map(lang => lang.value);\n    setLangChartData(data);\n    if (data.length > 0) {\n      const backgroundColor = langData.map(({\n        color\n      }) => `#${color.length > 4 ? color.slice(1) : color.slice(1).repeat(2)}B3`);\n      const borderColor = langData.map(lang => `${lang.color}`);\n      const chartType = 'pie';\n      const axes = false;\n      const legend = true;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  };\n\n  // Create Most Starred chart\n  const {\n    0: starChartData,\n    1: setStarChartData\n  } = useState(null);\n  const initStarChart = () => {\n    const ctx = document.getElementById('starChart');\n    const LIMIT = 5;\n    const sortProperty = 'stargazers_count';\n    const mostStarredRepos = repoData.filter(repo => !repo.fork).sort((a, b) => b[sortProperty] - a[sortProperty]).slice(0, LIMIT);\n    const labels = mostStarredRepos.map(repo => repo.name);\n    const data = mostStarredRepos.map(repo => repo[sortProperty]);\n    setStarChartData(data);\n    if (data.length > 0) {\n      const chartType = 'bar';\n      const axes = true;\n      const legend = false;\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  };\n\n  // Create Stars per language chart\n  const {\n    0: thirdChartData,\n    1: setThirdChartData\n  } = useState(null);\n  const initThirdChart = () => {\n    const ctx = document.getElementById('thirdChart');\n    const filteredRepos = repoData.filter(repo => !repo.fork && repo.stargazers_count > 0);\n    const uniqueLangs = new Set(filteredRepos.map(repo => repo.language));\n    const labels = Array.from(uniqueLangs.values()).filter(l => l);\n    const data = labels.map(lang => {\n      const repos = filteredRepos.filter(repo => repo.language === lang);\n      const starsArr = repos.map(r => r.stargazers_count);\n      const starSum = starsArr.reduce((a, b) => a + b, 0);\n      return starSum;\n    });\n    setThirdChartData(data);\n    if (data.length > 0) {\n      const chartType = 'doughnut';\n      const axes = false;\n      const legend = true;\n      const borderColor = labels.map(label => langColors[label]);\n      const backgroundColor = borderColor.map(color => `${color}B3`);\n      const config = {\n        ctx,\n        chartType,\n        labels,\n        data,\n        backgroundColor,\n        borderColor,\n        axes,\n        legend\n      };\n      buildChart(config);\n    }\n  };\n  useEffect(() => {\n    if (langData.length && repoData.length) {\n      initLangChart();\n      initStarChart();\n      initThirdChart();\n    }\n  }, []);\n  const chartSize = 300;\n  const langChartError = !(langChartData && langChartData.length > 0);\n  const starChartError = !(starChartData && starChartData.length > 0);\n  const thirdChartError = !(thirdChartData && thirdChartData.length > 0);\n  return __jsx(Section, {\n    dark: true\n  }, __jsx(ChartsStyles, null, __jsx(\"div\", {\n    className: \"chart\"\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Top Languages\")), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, langChartError && __jsx(\"p\", null, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"langChart\",\n    width: chartSize,\n    height: chartSize\n  }))), __jsx(\"div\", {\n    className: \"chart\"\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Most Starred\")), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, starChartError && __jsx(\"p\", null, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"starChart\",\n    width: chartSize,\n    height: chartSize\n  }))), __jsx(\"div\", {\n    className: \"chart\"\n  }, __jsx(\"header\", null, __jsx(\"h2\", null, \"Stars per Language\")), __jsx(\"div\", {\n    className: \"chart-container\"\n  }, thirdChartError && __jsx(\"p\", null, \"Nothing to see here!\"), __jsx(\"canvas\", {\n    id: \"thirdChart\",\n    width: chartSize,\n    height: chartSize\n  })))));\n};\nexport default Charts;","map":null,"metadata":{},"sourceType":"module"}