{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Head, UserInfo, Charts, Repos, Footer, Corner, Error, RateLimit } from '../components';\nimport GhPolyglot from 'gh-polyglot';\n// import { mockUserData, mockLangData, mockRepoData } from '../utils';\n\nconst User = props => {\n  const username = props.query.id;\n  const {\n    0: userData,\n    1: setUserData\n  } = useState(null);\n  const {\n    0: langData,\n    1: setLangData\n  } = useState(null);\n  const {\n    0: repoData,\n    1: setRepoData\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState({\n    active: false,\n    type: 200\n  });\n  const {\n    0: rateLimit,\n    1: setRateLimit\n  } = useState(null);\n  const getUserData = () => {\n    fetch(`https://api.github.com/users/${username}`).then(response => {\n      if (response.status === 404) {\n        return setError({\n          active: true,\n          type: 404\n        });\n      }\n      if (response.status === 403) {\n        return setError({\n          active: true,\n          type: 403\n        });\n      }\n      return response.json();\n    }).then(json => setUserData(json)).catch(error => {\n      setError({\n        active: true,\n        type: 400\n      });\n      console.error('Error:', error);\n    });\n  };\n  const getLangData = () => {\n    const me = new GhPolyglot(`${username}`);\n    me.userStats((err, stats) => {\n      if (err) {\n        console.error('Error:', err);\n        setError({\n          active: true,\n          type: 400\n        });\n      }\n      setLangData(stats);\n    });\n  };\n  const getRepoData = () => {\n    fetch(`https://api.github.com/users/${username}/repos?per_page=100`).then(response => {\n      if (response.status === 404) {\n        return setError({\n          active: true,\n          type: 404\n        });\n      }\n      if (response.status === 403) {\n        return setError({\n          active: true,\n          type: 403\n        });\n      }\n      return response.json();\n    }).then(json => setRepoData(json)).catch(error => {\n      setError({\n        active: true,\n        type: 200\n      });\n      console.error('Error:', error);\n    });\n  };\n  useEffect(() => {\n    fetch(`https://api.github.com/rate_limit`).then(response => response.json()).then(json => {\n      setRateLimit(json.resources.core);\n      if (json.resources.core.remaining < 1) {\n        setError({\n          active: true,\n          type: 403\n        });\n      }\n    });\n    getUserData();\n    getLangData();\n    getRepoData();\n\n    // setUserData(mockUserData);\n    // setLangData(mockLangData);\n    // setRepoData(mockRepoData);\n  }, []);\n  return __jsx(\"main\", null, error && error.active ? __jsx(Error, {\n    error: error\n  }) : __jsx(React.Fragment, null, __jsx(Head, {\n    title: `${username ? `Github Profile | ${username}` : 'Github Profile'}`\n  }), __jsx(Corner, null), userData && __jsx(UserInfo, {\n    userData: userData\n  }), langData && repoData && __jsx(Charts, {\n    langData: langData,\n    repoData: repoData\n  }), repoData && __jsx(Repos, {\n    repoData: repoData\n  }), __jsx(Footer, null)));\n};\nexport default User;","map":null,"metadata":{},"sourceType":"module"}